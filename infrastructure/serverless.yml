service: be-scheduler-service

custom:
    stage: ${opt:stage, "development"}
    dynamoDb:
        tableName: be-scheduler-${self:custom.stage}
        billingMode: PAY_PER_REQUEST
    sqs:
        dispatcherQueueName: be-scheduler-${self:custom.stage}-ShortTermDispatcherSQSQueue
    common:
        deletionPolicies:
            development: Delete
            default: Retain
        deletionPolicy: ${self:custom.common.deletionPolicies.${self:custom.stage}, self:custom.common.deletionPolicies.default}
    authorizer:
        name: authorizer
        identitySource: method.request.header.Authorization
        type: token
    webpack:
        webpackConfig: ./webpack.config.js
        packager: 'yarn'

package:
  individually: true

### PLUGINS

plugins:
    - serverless-webpack
    - serverless-offline

### RESOURCES

resources:
    - ${file(./infrastructure/resources/DB.yml)}
    - ${file(./infrastructure/resources/SQS.yml)}

### PROVIDER

provider:
    name: aws
    runtime: nodejs12.x
    region: ca-central-1
    stage: ${self:custom.stage}
    environment:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        REGION: ${self:provider.region}
        DYNAMODB_TABLE: ${self:custom.dynamoDb.tableName}
        SQS_QUEUE: ${self:custom.sqs.dispatcherQueueName}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:*:*:table/${self:custom.dynamoDb.tableName}"
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - "arn:aws:dynamodb:*:*:table/${self:custom.dynamoDb.tableName}/index/GSI1"
      - Effect: "Allow"
        Action:
          - sqs:SendMessage
        Resource:
          - "arn:aws:sqs:*:*:${self:custom.sqs.dispatcherQueueName}"

### FUNCTIONS

functions:

    schedule:
        handler: src/functions/schedule/index.handler
        events:
            - http:
                path: /scheduler/
                method: post
                cors: true

    dispatch:
        handler: src/functions/dispatch/index.handler
        events:
            - eventBridge:
                schedule: rate(10 minutes)

    trigger:
        handler: src/functions/trigger/index.handler
        events:
            - sqs:
                arn:
                    Fn::GetAtt:
                        - ShortTermDispatcherSQSQueue
                        - Arn
